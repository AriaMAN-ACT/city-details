{"version":3,"sources":["components/Clock.js","model/ShowState.js","components/Weather.js","components/App.js","index.js"],"names":["Clock","props","timeZone","undefined","hasOwnProperty","parseFloat","toString","state","hour","minute","second","miliSecond","updateClock","bind","standardClock","onChange","date","Date","this","offset","getTimezoneOffset","getTime","setState","getHours","getMinutes","getSeconds","getMilliseconds","setTimeout","standardHour","standardMinute","standardSecond","standardMiliSecond","standardDayTime","event","target","value","preventDefault","className","onSubmit","type","Component","showState","NOTHING_TO_SHOW","LOADING","READY","ERROR","Weather","lon","lat","main","description","temp","tempFillsLike","minTemp","maxTemp","humidity","windSpeed","windDeg","timezone","country","city","errorMessage","requestData","onCityInputChanged","onLonInputChanged","onLatInputChanged","onCityFormSubmited","onGeoFormSubmited","cityName","fetch","method","mode","cache","credentials","request","json","response","cod","coord","weather","Math","round","feels_like","temp_min","temp_max","wind","speed","deg","sys","name","message","tabIndex","id","App","getCurrentTimeZone","ReactDom","render","document","querySelector"],"mappings":"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","file":"static/js/main.e4d71bc6.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport '../style/clock.css'\n\nclass Clock extends Component {\n    constructor(props) {\n        super(props);\n\n        let timeZone = undefined;\n        if(props.hasOwnProperty('timeZone')) {\n            timeZone = parseFloat(props.timeZone);\n        }\n\n        if(timeZone.toString() === 'NaN') {\n            timeZone = 0;\n        }\n\n        this.state = {hour: 0, minute: 0, second: 0, miliSecond: 0, timeZone};\n\n        this.updateClock = this.updateClock.bind(this);\n        this.standardClock = this.standardClock.bind(this);\n        this.onChange = this.onChange.bind(this);\n\n        this.updateClock();\n    }\n\n    updateClock() {\n        let date = new Date();\n        if(typeof this.state.timeZone != 'undefined') {\n            let offset = this.state.timeZone * 60 + date.getTimezoneOffset();\n            date = new Date(new Date().getTime() + offset * 60000);\n        }\n        this.setState({\n            hour: date.getHours(),\n            minute: date.getMinutes(),\n            second: date.getSeconds(),\n            miliSecond: date.getMilliseconds()\n        });\n        setTimeout(this.updateClock, 1);\n    }\n\n    standardClock() {\n        let standardHour = this.state.hour > 12 ? this.state.hour - 12 < 10 ? '0' + (this.state.hour - 12) : '' + (this.state.hour - 12) : this.state < 10 ? '0' + this.state.hour : '' + this.state.hour;\n        let standardMinute = this.state.minute < 10 ? '0' + this.state.minute : '' + this.state.minute;\n        let standardSecond = this.state.second < 10 ? '0' + this.state.second : '' + this.state.second;\n        let standardMiliSecond = this.state.miliSecond < 10 ? '00' + this.state.miliSecond : this.state.miliSecond < 100 ? '0' + this.state.miliSecond : '' + this.state.miliSecond;\n        let standardDayTime = this.state.hour > 12 ? 'PM' : 'AM';\n        return `${standardHour}:${standardMinute}:${standardSecond}.${standardMiliSecond} ${standardDayTime}`;\n    }\n\n    onChange(event) {\n        let timeZone = event.target.value;\n        if(timeZone > 13) {\n            timeZone = 13;\n        } else if(timeZone < -13) {\n            timeZone = -13\n        }\n\n        if(timeZone.toString() === 'NaN') {\n            timeZone = 0;\n        }\n\n        this.setState({timeZone});\n    }\n\n    onSubmit(event) {\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <div className=\"ui segment clock\">\n                <div className=\"clock-title\">Clock</div>\n                <div className=\"time\">{this.standardClock()}</div>\n                <form className=\"ui form\" onSubmit={this.onSubmit}>\n                    <div className=\"field\">\n                        <label className=\"time-zone-input-label\">Time Zone</label>\n                        <input type=\"text\" value={this.state.timeZone} onChange={this.onChange} className=\"time-zone-input\" />\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Clock;","const showState = {\n    NOTHING_TO_SHOW: 'nothing to show',\n    LOADING: 'loading',\n    READY: 'ready',\n    ERROR: 'error'\n}\n\nexport default showState;","import React, {Component} from 'react';\n\nimport showState from '../model/ShowState';\n\nimport '../style/weather.css';\n\nclass Weather extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lon: 0, \n            lat: 0, \n            main: '', \n            description: '', \n            temp: 0, \n            tempFillsLike: 0, \n            minTemp: 0, \n            maxTemp: 0, \n            humidity: 0, \n            windSpeed: 0, \n            windDeg: 0,\n            timezone: 0, \n            country: '', \n            city: '', \n            errorMessage: '', \n            showState: showState.NOTHING_TO_SHOW\n        };\n        this.requestData('Tehran');\n        this.requestData = this.requestData.bind(this);\n        this.showState = this.showState.bind(this);\n        this.onCityInputChanged = this.onCityInputChanged.bind(this);\n        this.onLonInputChanged = this.onLonInputChanged.bind(this);\n        this.onLatInputChanged = this.onLatInputChanged.bind(this);\n        this.onCityFormSubmited = this.onCityFormSubmited.bind(this);\n        this.onGeoFormSubmited = this.onGeoFormSubmited.bind(this);\n    }\n\n    async requestData(cityName = '', lon = 0.0, lat = 0.0) {\n        this.setState({showState: showState.LOADING});\n        if (cityName !== '') {\n            var request = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&APPID=9dfbdb4bc5678740177cb404fe2009c9`, {\n                method: 'GET',\n                mode: 'cors',\n                cache: 'no-cache',\n                credentials: 'same-origin'\n            });\n        } else {\n            var request = await fetch(`http://api.openweathermap.org/data/2.5/weather?lon=${lon}&lat=${lat}&APPID=9dfbdb4bc5678740177cb404fe2009c9`, {\n                method: 'GET',\n                mode: 'cors',\n                cache: 'no-cache',\n                credentials: 'same-origin'\n            });\n        }\n        const response = await request.json();\n        if(response.cod === 200){\n            this.setState({\n                lon: response.coord.lon, \n                lat: response.coord.lat, \n                main: response.weather[0].main, \n                description: response.weather[0].description, \n                temp: Math.round((response.main.temp - 273) * 100) / 100, \n                tempFillsLike: Math.round((response.main.feels_like - 273) * 100) / 100, \n                minTemp: Math.round((response.main.temp_min - 273) * 100) / 100, \n                maxTemp: Math.round((response.main.temp_max - 273) * 100) / 100, \n                humidity: response.main.humidity, \n                windSpeed: response.wind.speed, \n                windDeg: response.wind.deg,\n                timezone: response.timezone / 3600, \n                country: response.sys.country, \n                city: response.name, \n                showState: showState.READY\n            });\n        } else {\n            this.setState({\n                showState: showState.ERROR, \n                errorMessage: response.message\n            });\n        }\n    }\n\n    onCityInputChanged(event) {\n        this.setState({city: event.target.value});\n    }\n\n    onLonInputChanged(event) {\n        this.setState({lon: event.target.value})\n    }\n\n    onLatInputChanged(event) {\n        this.setState({lat: event.target.value})\n    }\n\n    onCityFormSubmited(event) {\n        event.preventDefault();\n        this.requestData(this.state.city);\n    }\n\n    onGeoFormSubmited(event) {\n        event.preventDefault();\n        this.requestData('', this.state.lon, this.state.lat);\n    }\n\n    showState() {\n        switch(this.state.showState) {\n            case showState.NOTHING_TO_SHOW:\n                return (\n                    <div>\n                        <form className=\"ui form search-form\" onSubmit={this.onCityFormSubmited}>\n                            <div className=\"field\">\n                                <label className=\"input-lable\">City</label>\n                                <input type=\"text\" value={this.state.city} className=\"form-input\"  onChange={this.onCityInputChanged} />\n                            </div>\n                            <button type=\"submit\" className=\"ui vertical animated button primary search-button\" tabIndex=\"0\">\n                                <div className=\"hidden content\" id=\"color-black\">search</div>\n                                <div className=\"visible content\">\n                                    <i className=\"search icon\" id=\"color-black\"></i>\n                                </div>\n                            </button>\n                        </form>\n                        <form className=\"ui form search-form\" onSubmit={this.onGeoFormSubmited}>\n                            <div className=\"field\">\n                                <label className=\"input-lable\">Lon</label>\n                                <input type=\"text\" value={this.state.lon} className=\"form-input\" onChange={this.onLonInputChanged}/>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"input-lable\">Lat</label>\n                                <input type=\"text\" value={this.state.lat} className=\"form-input\" onChange={this.onLatInputChanged}/>\n                            </div>\n                            <button type=\"submit\" className=\"ui vertical animated button primary search-button\" tabIndex=\"0\">\n                                <div className=\"hidden content\" id=\"color-black\">search</div>\n                                <div className=\"visible content\">\n                                    <i className=\"search icon\" id=\"color-black\"></i>\n                                </div>\n                            </button>\n                        </form>\n                    </div>\n                );\n            case showState.LOADING:\n                return (\n                    <div className=\"loading\">\n                        <i className=\"icon download\"></i>\n                    </div>\n                );\n            case showState.READY:\n                return (\n                    <div>\n                        <form className=\"ui form search-form\" onSubmit={this.onCityFormSubmited}>\n                            <div className=\"field\">\n                                <label className=\"input-lable\">City</label>\n                                <input type=\"text\" value={this.state.city} className=\"form-input\"  onChange={this.onCityInputChanged} />\n                            </div>\n                            <button type=\"submit\" className=\"ui vertical animated button primary search-button\" tabIndex=\"0\">\n                                <div className=\"hidden content\" id=\"color-black\">search</div>\n                                <div className=\"visible content\">\n                                    <i className=\"search icon\" id=\"color-black\"></i>\n                                </div>\n                            </button>\n                        </form>\n                        <form className=\"ui form search-form\" onSubmit={this.onGeoFormSubmited}>\n                            <div className=\"field\">\n                                <label className=\"input-lable\">Lon</label>\n                                <input type=\"text\" value={this.state.lon} className=\"form-input\" onChange={this.onLonInputChanged}/>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"input-lable\">Lat</label>\n                                <input type=\"text\" value={this.state.lat} className=\"form-input\" onChange={this.onLatInputChanged}/>\n                            </div>\n                            <button type=\"submit\" className=\"ui vertical animated button primary search-button\" tabIndex=\"0\">\n                                <div className=\"hidden content\" id=\"color-black\">search</div>\n                                <div className=\"visible content\">\n                                    <i className=\"search icon\" id=\"color-black\"></i>\n                                </div>\n                            </button>\n                        </form>\n                        <table className=\"weather-details\">\n                            <tr className=\"weather-details-rows\">\n                                <td>Status</td>\n                                <td>{`${this.state.main} (${this.state.description})`}</td>\n                            </tr>\n                            <tr className=\"weather-details-rows\">\n                                <td>Current Temperature</td>\n                                <td>{this.state.temp}<sup>o</sup></td>\n                            </tr>\n                            <tr className=\"weather-details-rows\">\n                                <td>Temperature Feels Like</td>\n                                <td>{this.state.tempFillsLike}<sup>o</sup></td>\n                            </tr>\n                            <tr className=\"weather-details-rows\">\n                                <td>Min Temperature</td>\n                                <td>{this.state.minTemp}<sup>o</sup></td>\n                            </tr>\n                            <tr className=\"weather-details-rows\">\n                                <td>Max Temperature</td>\n                                <td>{this.state.maxTemp}<sup>o</sup></td>\n                            </tr>\n                            <tr className=\"weather-details-rows\">\n                                <td>Humidity</td>\n                                <td>{`${this.state.humidity}%`}</td>\n                            </tr>\n                            <tr className=\"weather-details-rows\">\n                                <td>Wind Speed</td>\n                                <td>{`${this.state.windSpeed} (miles per hour)`}</td>\n                            </tr>\n                            <tr className=\"weather-details-rows\">\n                                <td>Wind Direction</td>\n                                <td>{`${this.state.windDeg} Deg`}</td>\n                            </tr>\n                            <tr className=\"weather-details-rows\">\n                                <td>Time Zone</td>\n                                <td>{`${this.state.timezone} GMT`}</td>\n                            </tr>\n                            <tr className=\"weather-details-rows\">\n                                <td>Country</td>\n                                <td>{this.state.country}</td>\n                            </tr>\n                        </table>\n                    </div>\n                );\n            case showState.ERROR:\n                return (\n                    <div>\n                        <form className=\"ui form search-form\" onSubmit={this.onCityFormSubmited}>\n                            <div className=\"field\">\n                                <label className=\"input-lable\">City</label>\n                                <input type=\"text\" value={this.state.city} className=\"form-input\"  onChange={this.onCityInputChanged} />\n                            </div>\n                            <button type=\"submit\" className=\"ui vertical animated button primary search-button\" tabIndex=\"0\">\n                                <div className=\"hidden content\" id=\"color-black\">search</div>\n                                <div className=\"visible content\">\n                                    <i className=\"search icon\" id=\"color-black\"></i>\n                                </div>\n                            </button>\n                        </form>\n                        <form className=\"ui form search-form\" onSubmit={this.onGeoFormSubmited}>\n                            <div className=\"field\">\n                                <label className=\"input-lable\">Lon</label>\n                                <input type=\"text\" value={this.state.lon} className=\"form-input\" onChange={this.onLonInputChanged}/>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"input-lable\">Lat</label>\n                                <input type=\"text\" value={this.state.lat} className=\"form-input\" onChange={this.onLatInputChanged}/>\n                            </div>\n                            <button type=\"submit\" className=\"ui vertical animated button primary search-button\" tabIndex=\"0\">\n                                <div className=\"hidden content\" id=\"color-black\">search</div>\n                                <div className=\"visible content\">\n                                    <i className=\"search icon\" id=\"color-black\"></i>\n                                </div>\n                            </button>\n                        </form>\n                        <div className=\"error\">error</div>\n                    </div>\n                );\n            default:\n                return <div></div>;\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"ui segment weather\">\n                <div className=\"weather-title\">Weather</div>\n                {this.showState()}\n            </div>\n        );\n    }\n}\n\nexport default Weather;","import React, {Component} from 'react';\n\nimport Clock from './Clock';\nimport Weather from './Weather';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    getCurrentTimeZone() {\n        let date = new Date();\n        let offset = date.getTimezoneOffset();\n        return 0 - offset / 60;\n    }\n\n    render() {\n        return (\n            <div>\n                <Clock timeZone={`${this.getCurrentTimeZone()}`} />\n                <Weather />\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDom from 'react-dom';\n\nimport App from './components/App';\n\nReactDom.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}